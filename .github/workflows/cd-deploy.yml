name: CD-Deploy
on:
  push:
    branches:
      - "develop"
    paths:
        - "infrastructure/**"

jobs: 
  push-build-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

    # Define Infrastructure
      - name: TF plan
        id: plan
        working-directory: "infrastructure"
        run: |
          terraform init -backend-config="key=mlops-grocery-sales-prod.tfstate" --reconfigure && terraform plan --var-file vars/prod.tfvars
        
      - name: TF Apply
        id: tf-apply
        working-directory: "infrastructure"
        if: ${{ steps.tf-plan.outcome }} == "success"
        run: |
          terraform apply -auto-approve -var-file=vars/prod.tfvars
          echo "::set-output name=rest_api_url::$(terraform output rest_api_url | xargs)"
          echo "::set-output name=ecr_repo::$(terraform output run_id | xargs)"
          echo "::set-output name=run_id::$(terraform output run_id | xargs)"
          echo "::set-output name=lambda_function::$(terraform output lambda_function | xargs)"

      # Build-Push
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-step
        working-directory: "infrastructure"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.tf-apply.outputs.ecr_repo }}
          IMAGE_TAG: "latest"   # ${{ github.sha }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image_uri::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
